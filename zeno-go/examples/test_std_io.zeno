import { println } from "std/fmt"
import { readFile, writeFile } from "std/io"

fn main() {
    let testFileName = "test_io_output.txt"
    let testContent = "Hello from Zeno std/io test!"
    
    println("Attempting to write to file...")
    let success = writeFile(testFileName, testContent)
    // Assuming bool 'true' prints as "true" or similar.
    // Depending on how __native_println handles booleans when passed from Zeno.
    // If println now strictly takes string, this might need adjustment:
    // println(nativeBoolToString(success)) 
    // For now, let's assume direct printing works or will be handled by string conversion in Zeno if needed.
    // For simplicity with current println(value: string), let's convert bool to string manually if necessary.
    // However, the native call zenoNativePrintln(args ...interface{}) can handle bools.
    // The constraint is in the Zeno layer: println(value: string).
    // Let's assume we want to test the boolean return, we might need a helper in Zeno or adjust println.
    // Given current state: println expects string.
    // So, we should reflect this in the test for now.
    if success {
        println("writeFile reported success.")
    } else {
        println("writeFile reported failure.")
    }

    println("Attempting to read from file...")
    let readContent = readFile(testFileName)
    println(readContent) 

    println("Attempting to read non-existent file...")
    let nonExistent = readFile("this_file_should_not_exist.txt")
    println(nonExistent)
}
