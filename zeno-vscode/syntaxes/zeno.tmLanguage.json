{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Zeno",
    "scopeName": "source.zeno",
    "patterns": [
        { "include": "#comments" },
        { "include": "#function_definition" },
        { "include": "#variable_declaration" },
        { "include": "#keywords" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#operators" },
        { "include": "#types" },
        { "include": "#function_calls" },
        { "include": "#identifiers" },
        { "include": "#punctuation" }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.zeno",
                    "match": "//.*$",
                    "captures": {
                        "0": { "name": "punctuation.definition.comment.zeno" }
                    }
                },
                {
                    "name": "comment.block.zeno",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "captures": {
                        "0": { "name": "punctuation.definition.comment.zeno" }
                    }
                }
            ]
        },
        "function_definition": {
            "patterns": [
                {
                    "match": "\\b(pub\\s+)?(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                    "captures": {
                        "1": { "name": "storage.modifier.zeno" },
                        "2": { "name": "storage.type.function.zeno" },
                        "3": { "name": "entity.name.function.definition.zeno" }
                    }
                }
            ]
        },
        "variable_declaration": {
            "patterns": [
                {
                    "match": "\\b(let)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(:)?\\s*([a-zA-Z_][a-zA-Z0-9_]*)?",
                    "captures": {
                        "1": { "name": "storage.type.variable.zeno" },
                        "2": { "name": "variable.other.declaration.zeno" },
                        "3": { "name": "punctuation.separator.type.zeno" },
                        "4": { "name": "entity.name.type.zeno" }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.conditional.zeno",
                    "match": "\\b(if|else)\\b"
                },
                {
                    "name": "keyword.control.loop.zeno",
                    "match": "\\b(while|for|in)\\b"
                },
                {
                    "name": "keyword.control.flow.zeno",
                    "match": "\\b(return|break|continue)\\b"
                },
                {
                    "name": "keyword.control.import.zeno",
                    "match": "\\b(import|from)\\b"
                },
                {
                    "name": "storage.modifier.visibility.zeno",
                    "match": "\\b(pub)\\b"
                },
                {
                    "name": "storage.type.function.zeno",
                    "match": "\\b(fn)\\b"
                },
                {
                    "name": "storage.type.variable.zeno",
                    "match": "\\b(let)\\b"
                },
                {
                    "name": "constant.language.boolean.zeno",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "name": "constant.language.null.zeno",
                    "match": "\\b(null)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.zeno",
                    "begin": "\"",
                    "end": "\"",
                    "beginCaptures": {
                        "0": { "name": "punctuation.definition.string.begin.zeno" }
                    },
                    "endCaptures": {
                        "0": { "name": "punctuation.definition.string.end.zeno" }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape.zeno",
                            "match": "\\\\(n|t|r|\\\\|\"|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{2}|.)"
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.float.zeno",
                    "match": "\\b([0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?)\\b"
                },
                {
                    "name": "constant.numeric.integer.decimal.zeno",
                    "match": "\\b([0-9]+)\\b"
                },
                {
                    "name": "constant.numeric.integer.hexadecimal.zeno",
                    "match": "\\b(0[xX][0-9a-fA-F]+)\\b"
                },
                {
                    "name": "constant.numeric.integer.binary.zeno",
                    "match": "\\b(0[bB][01]+)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.zeno",
                    "match": "(\\+|\\-|\\*|\\/|%)"
                },
                {
                    "name": "keyword.operator.comparison.zeno",
                    "match": "(==|!=|<=|>=|<|>)"
                },
                {
                    "name": "keyword.operator.logical.zeno",
                    "match": "(&&|\\|\\||!)"
                },
                {
                    "name": "keyword.operator.assignment.zeno",
                    "match": "(=|\\+=|\\-=|\\*=|\\/=|%=)"
                },
                {
                    "name": "keyword.operator.bitwise.zeno",
                    "match": "(&|\\||\\^|<<|>>|~)"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "entity.name.type.primitive.zeno",
                    "match": "\\b(int|string|bool|float|array|map)\\b"
                },
                {
                    "name": "entity.name.type.custom.zeno",
                    "match": "\\b([A-Z][a-zA-Z0-9_]*)\\b"
                }
            ]
        },
        "function_calls": {
            "patterns": [
                {
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
                    "captures": {
                        "1": { "name": "entity.name.function.call.zeno" }
                    }
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "variable.other.readwrite.zeno",
                    "match": "\\b([a-z_][a-zA-Z0-9_]*)\\b"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.section.block.begin.bracket.curly.zeno",
                    "match": "\\{"
                },
                {
                    "name": "punctuation.section.block.end.bracket.curly.zeno",
                    "match": "\\}"
                },
                {
                    "name": "punctuation.section.group.begin.bracket.round.zeno",
                    "match": "\\("
                },
                {
                    "name": "punctuation.section.group.end.bracket.round.zeno",
                    "match": "\\)"
                },
                {
                    "name": "punctuation.section.brackets.begin.zeno",
                    "match": "\\["
                },
                {
                    "name": "punctuation.section.brackets.end.zeno",
                    "match": "\\]"
                },
                {
                    "name": "punctuation.separator.comma.zeno",
                    "match": ","
                },
                {
                    "name": "punctuation.separator.semicolon.zeno",
                    "match": ";"
                },
                {
                    "name": "punctuation.accessor.dot.zeno",
                    "match": "\\."
                },
                {
                    "name": "punctuation.separator.type.annotation.zeno",
                    "match": ":"
                }
            ]
        }
    }
}
