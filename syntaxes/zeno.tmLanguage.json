{
  "name": "Zeno",
  "scopeName": "source.zeno",
  "fileTypes": ["zeno"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#imports"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.zeno",
          "match": "//.*$"
        },
        {
          "name": "comment.block.zeno",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.zeno",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.zeno",
              "match": "\\\\[\"\\\\ntr]"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.zeno",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.zeno",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.zeno",
          "match": "\\b(if|else|while|for|loop|break|continue|return)\\b"
        },
        {
          "name": "keyword.declaration.zeno",
          "match": "\\b(let|fn|pub)\\b"
        },
        {
          "name": "keyword.other.zeno",
          "match": "\\b(import|from|as)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.zeno",
          "match": "\\b(int|float|string|bool)\\b"
        },
        {
          "name": "storage.type.custom.zeno",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.zeno",
          "match": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "keyword.declaration.function.zeno"
            },
            "2": {
              "name": "entity.name.function.zeno"
            }
          }
        },
        {
          "name": "meta.function-call.zeno",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.call.zeno"
            }
          }
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "name": "meta.import.zeno",
          "begin": "\\b(import)\\s*\\{",
          "end": "\\}\\s*(from)\\s*(\"[^\"]*\")",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.import.zeno"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.other.from.zeno"
            },
            "2": {
              "name": "string.quoted.double.module.zeno"
            }
          },
          "patterns": [
            {
              "name": "entity.name.function.import.zeno",
              "match": "[a-zA-Z_][a-zA-Z0-9_]*"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.zeno",
          "match": "[+\\-*/%]"
        },
        {
          "name": "keyword.operator.comparison.zeno",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.zeno",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.assignment.zeno",
          "match": "="
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.zeno",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
